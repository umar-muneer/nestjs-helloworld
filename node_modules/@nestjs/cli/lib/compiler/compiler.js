"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ts = require("typescript");
const get_value_or_default_1 = require("./helpers/get-value-or-default");
const tsconfig_paths_hook_1 = require("./hooks/tsconfig-paths.hook");
class Compiler {
    constructor(pluginsLoader, tsConfigProvider) {
        this.pluginsLoader = pluginsLoader;
        this.tsConfigProvider = tsConfigProvider;
        this.formatHost = {
            getCanonicalFileName: path => path,
            getCurrentDirectory: ts.sys.getCurrentDirectory,
            getNewLine: () => ts.sys.newLine,
        };
    }
    run(configuration, configFilename, appName, onSuccess) {
        const { options, fileNames, projectReferences, } = this.tsConfigProvider.getByConfigFilename(configFilename);
        const program = ts.createProgram({
            rootNames: fileNames,
            projectReferences,
            options,
        });
        const pluginsConfig = get_value_or_default_1.getValueOrDefault(configuration, 'compilerOptions.plugins', appName);
        const plugins = this.pluginsLoader.load(pluginsConfig);
        const tsconfigPathsPlugin = tsconfig_paths_hook_1.tsconfigPathsBeforeHookFactory(options);
        const emitResult = program.emit(undefined, undefined, undefined, undefined, {
            before: plugins.beforeHooks.concat(tsconfigPathsPlugin),
            after: plugins.afterHooks,
            afterDeclarations: [],
        });
        this.reportAfterCompilationDiagnostic(program, emitResult);
        const exitCode = emitResult.emitSkipped ? 1 : 0;
        if (exitCode) {
            console.log(`Process exiting with code '${exitCode}'.`);
            process.exit(exitCode);
        }
        else {
            onSuccess && onSuccess();
        }
    }
    reportAfterCompilationDiagnostic(program, emitResult) {
        const diagnostics = ts
            .getPreEmitDiagnostics(program)
            .concat(emitResult.diagnostics);
        console.error(ts.formatDiagnosticsWithColorAndContext(diagnostics, this.formatHost));
        if (diagnostics.length > 0) {
            console.info(`Found ${diagnostics.length} error(s).` + ts.sys.newLine);
        }
    }
}
exports.Compiler = Compiler;
